/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.13 scene.gltf --transform --keepmeshes 
Files: scene.gltf [146.83KB] > scene-transformed.glb [2.68MB] (-1725%)
Author: re1monsen (https://sketchfab.com/re1monsen)
License: SKETCHFAB Editorial (https://sketchfab.com/licenses)
Source: https://sketchfab.com/3d-models/dieter-rams-braun-tp-1-radio-player-835476cd6b7e4ab593ee70bab2f68e76
Title: Dieter Rams, Braun TP 1 Radio Player
*/

import { useRef, useState, useEffect, forwardRef } from "react";
import gsap from "gsap";
import { useFrame } from "@react-three/fiber";
import { useGLTF } from "@react-three/drei";
import { useSnapshot } from "valtio";
import { state } from "@/store";

import Record from "./_Record";
import Player from "./_Player";
import Speaker from "./_Speaker";

const _ = (props: any) => {
  const [loaded, set] = useState(false);
  const snap = useSnapshot(state);
  const { nodes, materials } = useGLTF("/assets/deiter-transformed.glb") as any;

  const ref = useRef() as any;
  const record = useRef() as any;
  const side = useRef() as any;
  const player = useRef() as any;
  const speaker = useRef() as any;

  useFrame(() => {
    snap.musicPlaying &&
      (record.current.rotation.y -= snap.side == "front" ? -0.01 : 0.01);
  });

  useEffect(() => {
    if (!ref.current) return;
    if (snap.musicPlaying) {
      // ALL
      gsap.to(ref.current.rotation, {
        x: -Math.PI * 0.1,
        y: -Math.PI * 0.1,
        z: -Math.PI * 0.12,
        duration: 1.5,
        ease: "power4.out",
      });
      gsap.to(ref.current.position, {
        x: 0.75,
        y: 3.2,
        z: 3.5,
        duration: 1.5,
        ease: "power4.out",
      });

      // Speaker
      gsap.to(speaker.current.rotation, {
        x: Math.PI / 2,
        y: 0,
        z: 0,
        duration: 1.5,
        ease: "power4.out",
      });
      gsap.to(speaker.current.position, {
        x: -1,
        y: 0.1,
        z: 0,
        duration: 1.5,
        ease: "power4.out",
      });

      // Player
      gsap.to(player.current.rotation, {
        x: Math.PI / 2,
        y: 0,
        z: 0,
        duration: 1.5,
        ease: "power4.out",
      });
      gsap.to(player.current.position, {
        x: -1,
        y: 0,
        z: -0.04,
        duration: 1.5,
        ease: "power4.out",
      });

      // Record
      gsap.to(record.current.rotation, {
        x: Math.PI / 2,
        y: 0,
        z: 0,
        duration: 1.5,
        ease: "power4.out",
      });
      gsap.to(side.current.position, {
        x: 0.11,
        y: -0.07,
        z: 0.0438,
        duration: 1.5,
        ease: "power4.out",
      });
    } else {
      // ALL
      gsap.to(ref.current.rotation, {
        x: 0,
        y: 0,
        z: 0,
        duration: 1.5,
        ease: "power4.out",
      });
      gsap.to(ref.current.position, {
        x: 0.5,
        y: 0,
        z: 0,
        duration: 1.5,
        ease: "power4.out",
      });

      // Speaker
      gsap.to(speaker.current.rotation, {
        x: 0,
        y: 0,
        z: 0,
        duration: 1.5,
        ease: "power4.out",
      });
      gsap.to(speaker.current.position, {
        x: -1,
        y: 0,
        z: -0.1,
        duration: 1.5,
        ease: "power4.out",
      });

      // Player
      gsap.to(player.current.rotation, {
        x: 0,
        y: 0,
        z: 0,
        duration: 1.5,
        ease: "power4.out",
      });
      gsap.to(player.current.position, {
        x: -1,
        y: 0,
        z: 0,
        duration: 1.5,
        ease: "power4.out",
      });

      // Record
      gsap.to(record.current.rotation, {
        x: (Math.PI / 2) * 0.7,
        y: snap.side == "front" ? 0 : Math.PI,
        z: 0,
        duration: 1.5,
        ease: "power4.out",
      });
      gsap.to(side.current.position, {
        x: 0.15,
        y: 0.073,
        z: 0.2038,
        duration: 1.5,
        ease: "power4.out",
      });
    }

    if (!loaded) set(true);
  }, [snap.musicPlaying]);

  useEffect(() => {
    if (!ref.current) return;
    if (!loaded) {
      // jankkkkkk

      set(true);
    }
    const flip = () => {
      if (snap.side == "front") {
        gsap.to(side.current.rotation, {
          x: Math.PI,
          duration: 1,
          ease: "power4.out",
        });
        gsap.to(record.current.rotation, {
          y: Math.PI,
          duration: 1,
          ease: "power4.out",
        });
      } else {
        gsap.to(side.current.rotation, {
          x: 0,
          duration: 1,
          ease: "power4.out",
        });
        gsap.to(record.current.rotation, {
          y: 0,
          duration: 1,
          ease: "power4.out",
        });
      }
    };

    if (snap.musicPlaying) {
      gsap.to(side.current.position, {
        z: 0.15,
        duration: 1,
        ease: "power4.out",
        onComplete: () => {
          if (snap.musicPlaying) {
            flip();
            gsap.to(side.current.position, {
              z: 0.0438,
              duration: 1,
              ease: "power4.out",
            });
          }
        },
      });
      gsap.to(player.current.position, {
        z: -0.15,
        duration: 1,
        ease: "power4.out",
        onComplete: () => {
          gsap.to(player.current.position, {
            z: -0.04,
            duration: 1,
            ease: "power4.out",
          });
        },
      });
    } else {
      flip();
    }
  }, [snap.side]);

  return (
    <group
      ref={ref}
      {...props}
      scale={11}
      dispose={null}
      onClick={() => {
        state.musicPlaying = !state.musicPlaying;
      }}
    >
      <group ref={side} rotation={[0, 0, 0]}>
        <Record
          ref={record}
          position={[0, 0, 0]}
          // position={[-1.068, 0.147, -0.035]} on speaker
        />
      </group>

      <Player
        ref={player}
        nodes={nodes}
        materials={materials}
        position={[-1, 0, 0]}
      />
      <Speaker
        ref={speaker}
        nodes={nodes}
        materials={materials}
        position={[-1, 0, 0]}
      />
      {/* <BuiltSpeaker nodes={nodes} materials={materials} rotation={[0, 0, 0]} /> */}
    </group>
  );
};

useGLTF.preload("/assets/deiter-transformed.glb");

export default _;
