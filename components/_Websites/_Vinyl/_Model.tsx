/* eslint-disable react-hooks/exhaustive-deps */
/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.13 scene.gltf --transform --keepmeshes 
Files: scene.gltf [146.83KB] > scene-transformed.glb [2.68MB] (-1725%)
Author: re1monsen (https://sketchfab.com/re1monsen)
License: SKETCHFAB Editorial (https://sketchfab.com/licenses)
Source: https://sketchfab.com/3d-models/dieter-rams-braun-tp-1-radio-player-835476cd6b7e4ab593ee70bab2f68e76
Title: Dieter Rams, Braun TP 1 Radio Player
*/

import { useRef, useState, useEffect, forwardRef } from "react";
import gsap from "gsap";
import { useFrame } from "@react-three/fiber";
import { Center, useGLTF } from "@react-three/drei";
import { useSnapshot } from "valtio";
import { state } from "@/store";

import Record from "./_Record";
import Player from "./_Player";
import Speaker from "./_Speaker";

const _ = (props: any) => {
  const [loaded, set] = useState(false);
  const snap = useSnapshot(state);
  const { nodes, materials } = useGLTF("/assets/deiter-transformed.glb") as any;

  const ref = useRef() as any;
  const record = useRef() as any;
  const side = useRef() as any;
  const player = useRef() as any;
  const speaker = useRef() as any;

  useFrame(() => {
    snap.musicPlaying &&
      record.current &&
      (record.current.rotation.y -= snap.side == "front" ? -0.01 : 0.01);
  });

  useEffect(() => {
    if (!loaded) set(true);
  }, []);

  useEffect(() => {
    if (!loaded) return;
    if (!ref.current) return;
    if (snap.musicPlaying) {
      if (!record.current) return;
      gsap.to(record.current.rotation, {
        x: 0,
        y: snap.side == "front" ? 0 : Math.PI,
        z: 0,
        duration: 1,
        ease: "power4.out",
      });
      if (!side.current) return;
      gsap.to(side.current.position, {
        x: 0.11,
        y: 0.1,
        z: 0.076,
        duration: 0.5,
        ease: "power2.out",
        onComplete: () => {
          if (!side.current) return;
          gsap.to(side.current.position, {
            x: 0.11,
            y: 0.068,
            z: 0.076,
            duration: 0.75,
            ease: "power4.inOut",
          });
        },
      });
    } else {
      if (!side.current) return;
      gsap.to(side.current.position, {
        x: 0.11,
        y: 0.1,
        z: 0.076,
        duration: 0.75,
        ease: "power2.out",
        overwite: true,
      });
      if (!record.current) return;
      gsap.to(record.current.rotation, {
        x: (Math.PI / 2) * 0.7,
        y: snap.side == "front" ? Math.PI : 0,
        z: 0,
        duration: 1.5,
        delay: 0.25,
        ease: "power4.out",
      });
      if (!side.current) return;
      gsap.to(side.current.position, {
        x: 0.15,
        y: 0.073,
        z: 0.2038,
        duration: 1.5,
        delay: 0.25,
        ease: "power4.out",
      });
    }
  }, [snap.musicPlaying]);

  useEffect(() => {
    if (!loaded) return;
    if (!ref.current) return;
    const flip = () => {
      if (snap.side == "front") {
        gsap.to(side.current.rotation, {
          x: Math.PI,
          duration: 1,
          ease: "power4.out",
        });
        gsap.to(record.current.rotation, {
          y: Math.PI,
          duration: 1,
          ease: "power4.out",
        });
      } else {
        gsap.to(side.current.rotation, {
          x: 0,
          duration: 1,
          ease: "power4.out",
        });
        gsap.to(record.current.rotation, {
          y: 0,
          duration: 1,
          ease: "power4.out",
        });
      }
    };

    if (snap.musicPlaying) {
      setTimeout(() => {
        flip();
      }, 100);
      gsap.to(side.current.position, {
        y: 0.2,
        duration: 0.75,
        ease: "power4.out",
        onComplete: () => {
          if (snap.musicPlaying) {
            gsap.to(side.current.position, {
              y: 0.068,
              duration: 0.75,
              ease: "power4.out",
            });
          }
        },
      });
    } else {
      flip();
    }
  }, [snap.side]);

  return (
    <group
      ref={ref}
      {...props}
      scale={11}
      dispose={null}
      onClick={() => {
        state.musicPlaying = !state.musicPlaying;
      }}
    >
      <Center position={[0.05, 0.05, 0]}>
        <group
          ref={side}
          position={[0.15, 0.073, 0.2038]}
          rotation={[Math.PI, 0, 0]}
        >
          <Record
            ref={record}
            rotation={[(Math.PI / 2) * 0.7, Math.PI, 0]}
            position={[0, 0, 0]}
          />
        </group>
        <Player
          ref={player}
          nodes={nodes}
          materials={materials}
          position={[-1, 0, 0]}
        />
        <Speaker
          ref={speaker}
          nodes={nodes}
          materials={materials}
          position={[-1, 0, -0.15]}
          rotation={[0, -0.03, 0]}
        />
      </Center>
    </group>
  );
};

useGLTF.preload("/assets/deiter-transformed.glb");

export default _;
